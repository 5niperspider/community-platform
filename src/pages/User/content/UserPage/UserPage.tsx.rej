diff a/src/pages/User/content/UserPage/UserPage.tsx b/src/pages/User/content/UserPage/UserPage.tsx	(rejected hunks)
@@ -1,11 +1,11 @@
-import * as React from 'react';
-import { RouteComponentProps } from 'react-router';
-import { inject, observer } from 'mobx-react';
-import { IUser, ILink } from 'src/models/user.models';
-import { UserStore } from 'src/stores/User/user.store';
-import Heading from 'src/components/Heading';
-import { Flex, Box, Link } from 'rebass';
-import { Avatar } from 'src/components/Avatar';
-import Text from 'src/components/Text';
-import styled from 'styled-components';
-import Icon from 'src/components/Icons';
+import * as React from 'react'
+import { RouteComponentProps } from 'react-router'
+import { inject, observer } from 'mobx-react'
+import { IUser, ILink } from 'src/models/user.models'
+import { UserStore } from 'src/stores/User/user.store'
+import Heading from 'src/components/Heading'
+import { Flex, Box, Link } from 'rebass'
+import { Avatar } from 'src/components/Avatar'
+import Text from 'src/components/Text'
+import styled from 'styled-components'
+import Icon from 'src/components/Icons'
@@ -133,56 +141,56 @@ export class UserPage extends React.Component<RouteComponentProps<IRouterCustomP
-	public render() {
-		const { user, isLoading } = this.state;
-		if (user) {
-			return (
-				<Box>
-					<Avatar userName={user.userName} width="120px" borderRadius={5} />
-					<Heading large color={'black'} my={3}>
-						{user.userName}
-					</Heading>
-					<Text small color={'grey'}>
-						@{user.userName}
-					</Text>
-					<Flex wrap={'nowrap'} alignItems={'center'}>
-						<Circle bg={'blue'} my={3}>
-							<Text color={'white'} m={'auto'}>
-								C
-							</Text>
-						</Circle>
-						<Heading small inline ml={2} my={0}>
-							Community builder
-						</Heading>
-						{user.year && (
-							<Heading small inline color={'grey'} ml={2} my={0}>
-								Since {new Date(user.year).getFullYear()}
-							</Heading>
-						)}
-					</Flex>
-					<Text lineHeight={2}>{user.about}</Text>
-					{user.location && (
-						<Flex alignItems={'center'}>
-							<Icon size={25} glyph={'location-on'} />
-							<Heading small m={3}>
-								{user.location.value}
-							</Heading>
-						</Flex>
-					)}
-					{user.links ? (
-						<Box mt={4}>
-							<Heading large>My Links</Heading>
-							{this.renderLinks(user.links)}
-						</Box>
-					) : null}
-				</Box>
-			);
-		} else {
-			return isLoading ? (
-				<Flex>
-					<Heading txtcenter width={1}>
-						loading...
-					</Heading>
-				</Flex>
-			) : (
-				<div>user not found</div>
-			);
-		}
-	}
+  public render() {
+    const { user, isLoading } = this.state
+    if (user) {
+      return (
+        <Box>
+          <Avatar userName={user.userName} width="120px" borderRadius={5} />
+          <Heading large color={'black'} my={3}>
+            {user.userName}
+          </Heading>
+          <Text small color={'grey'}>
+            @{user.userName}
+          </Text>
+          <Flex wrap={'nowrap'} alignItems={'center'}>
+            <Circle bg={'blue'} my={3}>
+              <Text color={'white'} m={'auto'}>
+                C
+              </Text>
+            </Circle>
+            <Heading small inline ml={2} my={0}>
+              Community builder
+            </Heading>
+            {user.year && (
+              <Heading small inline color={'grey'} ml={2} my={0}>
+                Since {new Date(user.year).getFullYear()}
+              </Heading>
+            )}
+          </Flex>
+          <Text lineHeight={2}>{user.about}</Text>
+          {user.location && (
+            <Flex alignItems={'center'}>
+              <Icon size={25} glyph={'location-on'} />
+              <Heading small m={3}>
+                {user.location.value}
+              </Heading>
+            </Flex>
+          )}
+          {user.links ? (
+            <Box mt={4}>
+              <Heading large>My Links</Heading>
+              {this.renderLinks(user.links)}
+            </Box>
+          ) : null}
+        </Box>
+      )
+    } else {
+      return isLoading ? (
+        <Flex>
+          <Heading txtcenter width={1}>
+            loading...
+          </Heading>
+        </Flex>
+      ) : (
+        <div>user not found</div>
+      )
+    }
+  }
