version: 2.1

######################################################################################################
#  Orbs - preconfigured environments for running specific jobs
######################################################################################################
# orbs:
# node: circleci/node@4.1.0
# cypress: cypress-io/cypress@1

######################################################################################################
#  Aliases - code snippets that can be included inline in any other markup
######################################################################################################
aliases:
  # use a base image running node v12 with chrome/firefox browsers preinstalled
  - &docker
    - image: circleci/node:12-browsers
    # These can also be created as commands, but slighly tidier to just use inline
    # restore/install/save can all be done with a single circle-ci orb, but less flexible and breaks intellisense
  - &restore_yarn_cache
    restore_cache:
      name: Restore yarn cache
      keys:
        # https://circleci.com/docs/2.0/caching/
        # when lock file changes, use increasingly general patterns to restore cache
        # NOTE - this will change if migrating to yarn v2 in the future
        - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - yarn-packages-v1-{{ .Branch }}-
        - yarn-packages-v1-
  - &install_packages
    run:
      name: Install Packages
      command: yarn --frozen-lockfile --cache-folder ~/.cache/yarn
  - &save_yarn_cache
    save_cache:
      paths:
        - ~/.cache/yarn
      key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

######################################################################################################
#  Jobs - Independently specified lists of tasks and environments for execution
######################################################################################################
jobs:
  # Prepare node module caches so that future tasks run more quickly
  # setup:
  #   docker: *docker
  #   steps:
  #     - checkout
  #     - *restore_yarn_cache
  #     - *install_packages
  #     - *save_yarn_cache
  # Run cypress e2e tests on chrome and firefox
  test_e2e:
    docker:
      - image: cypress/included:6.4.0
        environment:
          TERM: xterm
    parallelism: 2
    parameters:
      CI_NODE:
        type: integer
      CI_BROWSER:
        type: string
    steps:
      - checkout
      - *restore_yarn_cache
      - *install_packages
      - *save_yarn_cache
      - run:
          # assign build id from existing workflow id and run test
          command: |
            echo 'export CI_BUILD_ID=$CIRCLE_WORKFLOW_ID' >> $BASH_ENV
            npm run test ci
          environment:
            CI_BROWSER: << parameters.CI_BROWSER >>
            CI_NODE: << parameters.CI_NODE >>
            CI_GROUP: 2x-<< parameters.CI_BROWSER >>

  # Create a production build
  build:
    docker: *docker
    steps:
      # whilst checkout-install could be persisted from previous step, that is less efficient than just using caching
      - checkout
      - *restore_yarn_cache
      - *install_packages
      - *save_yarn_cache
      - run:
          command: npm run build
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - package.json
      #       - build
      # - store_artifacts:
      #     path: build
      #     destination: build

######################################################################################################
#  Workflows - Collections of jobs to define overall processes
######################################################################################################
workflows:
  version: 2
  build_and_test:
    # by default jobs will run concurrently, so specify requires if want to run sequentially
    jobs:
      - setup
      - test_e2e:
          name: e2e-<< matrix.CI_BROWSER >>-<< matrix.CI_NODE >>
          matrix:
            parameters:
              CI_NODE: [1]
              CI_BROWSER: ['chrome']
              # CI_NODE: [1, 2]
              # CI_BROWSER: ['chrome', 'firefox']
          requires:
            - setup
      - build:
          requires:
            - test_e2e
#   # Publishes on a cron schedule
#   publish_preleases_nightly:
#     unless: << pipeline.parameters.prerelease_commit_sha >>
#     triggers:
#       - schedule:
#           # At 10 minutes past 16:00 on Mon, Tue, Wed, Thu, and Fri
#           cron: "10 16 * * 1,2,3,4,5"
#           filters:
#             branches:
#               only:
#                 - master
#     jobs:
#       - setup
#       - publish_prerelease:
#           name: Publish to Next channel
#           requires:
#             - setup
#           commit_sha: master
#           release_channel: stable
#           dist_tag: next
#       - publish_prerelease:
#           name: Publish to Experimental channel
#           requires:
#             - setup
#           commit_sha: master
#           release_channel: experimental
#           dist_tag: experimental
