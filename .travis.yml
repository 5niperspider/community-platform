language: node_js
node_js:
  - '10'
dist: trusty
sudo: false
cache:
  yarn: true
  directories:
    # Cypress binary
    - ~/.cache
addons:
  chrome: stable
  apt:
    packages:
      # Required for cypress parallel tests
      - libgconf-2-4
branches:
  only:
    - master
    - production
env:
  # Tell jest to run without non-interactive mode
  CI=true

# add the current github branch as an environment variable
before_script:
  - export REACT_APP_BRANCH=$TRAVIS_BRANCH
  - echo "REACT_APP_BRANCH=$REACT_APP_BRANCH"

##############################################################################
# Cypress E2E Tests (parallel)
# create a default script that will allow cypress tests to be triggered from
# jobs (which creates a parallel travis matrix that cypress can hook into)
defaults: &defaults
  script:
    #   ## print all Travis environment variables for debugging
    - $(npm bin)/print-env TRAVIS
    - npm run test:ci
    # after all tests finish running we need
    # to kill all background jobs (like "npm start &")
    - kill $(jobs -p) || true

jobs:
  include:
    # we have multiple jobs to execute using just a single stage
    # but we can pass group name via environment variable to Cypress test runner
    - stage: test
      env:
        - STAGE_NAME=1x-electron
      <<: *defaults
    # run tests in parallel by including several test jobs with same name variable
    - stage: test
      env:
        - STAGE_NAME=4x-electron
      <<: *defaults
    - stage: test
      env:
        - STAGE_NAME=4x-electron
      <<: *defaults
    - stage: test
      env:
        - STAGE_NAME=4x-electron
      <<: *defaults
    - stage: test
      env:
        - STAGE_NAME=4x-electron
      <<: *defaults
##############################################################################

# install firebase cli and set firebase project ci token from environment
before_deploy:
  - npm run build
  - npm install -g firebase-tools
  - export FIREBASE_TOKEN=$(if [ "$TRAVIS_BRANCH" == "production" ]; then echo "$FIREBASE_PRODUCTION_TOKEN"; else echo "$FIREBASE_STAGING_TOKEN"; fi)
deploy:
  - provider: script
    script: bash scripts/deploy.dev.sh
    skip_cleanup: true
    on:
      branch: master
  - provider: script
    script: bash scripts/deploy.prod.sh
    skip_cleanup: true
    on:
      branch: production
after_deploy:
  - echo "REACT_APP_BRANCH=$REACT_APP_BRANCH"
